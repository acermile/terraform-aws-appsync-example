resource "aws_appsync_api_key" "example" {
  api_id  = aws_appsync_graphql_api.example.id
  expires = "2020-11-03T04:00:00Z"
}

resource "aws_appsync_graphql_api" "example" {
  authentication_type = "API_KEY"
  name                = "Theacetechologist-shop"
  schema              = <<EOF
type Address {
	id: String
	userid: String
	firstName: String
	lastName: String
	stateName: String
	stateAbbr: String
	address1: String
	address2: String
	city: String
	mobile: String
	pincode: String
	stateId: String
	countryId: String
}

type AutogeneratedMainType {
	count: Int
	total_count: Int
	current_page: Int
	per_page: Int
	pages: Int
	products: [Products]
}

type AutogeneratedMainTypeTaxonomies {
	count: Int
	current_page: Int
	pages: Int
	taxonomies: [taxonomies]
}

type Classifications {
	taxon_id: Int
	position: Int
	taxon: Taxon
}

type DynamoDBResult {
	scannedCount: Int
	items: [User]
}

type DynamoDBResultAddress {
	scannedCount: Int
	items: [Address]
}

type DynamoDBResultFavorite {
	scannedCount: Int
	items: [Favorite]
}

type Favorite {
	id: String
	productid: Int
	userid: String
	image: String
	name: String
	price: String
	currencySymbol: String
	slug: String
}

type Images {
	id: Int
	position: Int
	attachment_content_type: String
	attachment_file_name: String
	type: String
	attachment_updated_at: String
	attachment_width: String
	attachment_height: String
	alt: String
	viewable_type: String
	viewable_id: Int
	mini_url: String
	small_url: String
	product_url: String
	large_url: String
}

type Master {
	id: Int
	name: String
	sku: String
	price: String
	weight: String
	height: String
	width: String
	depth: String
	is_master: Boolean
	slug: String
	description: String
	track_inventory: Boolean
	display_price: String
	options_text: String
	in_stock: Boolean
	is_backorderable: Boolean
	is_orderable: Boolean
	total_on_hand: Int
	is_destroyed: Boolean
	images: [Images]
	option_values: [String]
}

type Mutation {
	addFavorite(
		id: String,
		userid: String!,
		productid: Int!,
		image: String,
		name: String,
		price: String,
		currencySymbol: String,
		slug: String
	): Favorite!
	addUser(id: String, name: String, email: String!): User!
	deleteFavorite(id: String): Favorite
	addAddress(
		userid: String,
		firstName: String,
		lastName: String,
		stateName: String,
		stateAbbr: String,
		address1: String,
		address2: String,
		city: String,
		mobile: String,
		pincode: String,
		stateId: String,
		countryId: String
	): Address!
}

type OptionTypes {
	id: Int
	name: String
	presentation: String
	position: Int
}

type OptionValues {
	id: Int
	name: String
	presentation: String
	option_type_name: String
	option_type_id: Int
	option_type_presentation: String
}

type ProductProperties {
	id: Int
	product_id: Int
	property_id: Int
	value: String
	property_name: String
}

type Products {
	id: Int
	name: String
	description: String
	price: String
	display_price: String
	available_on: String
	slug: String
	meta_description: String
	meta_keywords: String
	shipping_category_id: Int
	total_on_hand: Int
	avg_rating: String
	reviews_count: Int
	meta_title: String
	has_variants: Boolean
	classifications: [Classifications]
	product_properties: [ProductProperties]
	option_types: [OptionTypes]
	variants: [Variants]
	master: Master
	taxon_ids: [Int]
}

type Query {
	getCategories: AutogeneratedMainTypeTaxonomies
	getProductsbyTaxonomyID: AutogeneratedMainType
	getUser(email: String!): DynamoDBResult
	getFavorite(userid: String!): DynamoDBResultFavorite
	getAddress(userid: String!): DynamoDBResultAddress
	getConvertedPrice(amount: Float, fromCurrency: String, toCurrency: String): String
}

type Subscription {
	subscribeToNewMessage: Favorite
		@aws_subscribe(mutations: ["newFavorite"])
}

type Taxon {
	id: Int
	name: String
	pretty_name: String
	permalink: String
	parent_id: Int
	taxonomy_id: Int
	meta_title: String
	meta_description: String
	taxons: [Taxons]
}

type Taxons {
	id: Int
	name: String
	pretty_name: String
	permalink: String
	parent_id: Int
	taxonomy_id: Int
	meta_title: String
	meta_description: String
	icon: String
	taxons: [Taxons]
}

type User {
	id: String
	name: String
	email: String
}

type Variants {
	id: Int
	name: String
	sku: String
	price: String
	weight: String
	height: String
	width: String
	depth: String
	is_master: Boolean
	slug: String
	description: String
	track_inventory: Boolean
	display_price: String
	options_text: String
	in_stock: Boolean
	is_backorderable: Boolean
	is_orderable: Boolean
	total_on_hand: Int
	is_destroyed: Boolean
	images: [Images]
	option_values: [OptionValues]
}

type root {
	id: Int
	name: String
	pretty_name: String
	permalink: String
	parent_id: String
	taxonomy_id: Int
	meta_title: String
	meta_description: String
	taxons: [Taxons]
}

schema {
	query: Query
	mutation: Mutation
}

type taxonomies {
	id: Int
	name: String
	root: root
}
EOF

  log_config {
    cloudwatch_logs_role_arn = "arn:aws:iam::942960519349:role/service-role/appsync-graphqlapi-logs-us-east-1"
    exclude_verbose_content  = true
    field_log_level          = "ALL"
  }
}

resource "aws_appsync_datasource" "example" {
  api_id = aws_appsync_graphql_api.example.id
  name   = "apiendpoint"
  type   = "HTTP"

  http_config {
    endpoint = "https://app.ofypets.com"
  }
}

resource "aws_appsync_function" "test1" {
  api_id                   = aws_appsync_graphql_api.example.id
  data_source              = aws_appsync_datasource.example.name
  name                     = "getproductsbyId"
  request_mapping_template = <<EOF
{
    "method": "GET",
    ## E.G. if full path is https://api.xxxxxxxxx.com/posts then resourcePath would be /posts **
    "resourcePath": "/api/v1/taxons/products?id=$ctx.request.headers.taxid&per_page=20&data_set=small"
}
EOF

  response_mapping_template = <<EOF
  #if($ctx.error)
    $util.error($ctx.error.message, $ctx.error.type)
  #end
  ## If the response is not 200 then return an error. Else return the body **
  #if($ctx.result.statusCode == 200)
      $ctx.result.body
  #else
      $utils.appendError($ctx.result.body, "$ctx.result.statusCode")
  #end
EOF
}

resource "aws_appsync_function" "test2" {
  api_id                   = aws_appsync_graphql_api.example.id
  data_source              = aws_appsync_datasource.example.name
  name                     = "getCategories"
  request_mapping_template = <<EOF
{
      "method": "GET",
      "resourcePath": "/api/v1/taxonomies?set=nested"
}
EOF

  response_mapping_template = <<EOF
## Raise a GraphQL field error in case of a datasource invocation error
  #if($ctx.error)
    $util.error($ctx.error.message, $ctx.error.type)
  #end
  ## if the response status code is not 200, then return an error. Else return the body **
  #if($ctx.result.statusCode == 200)
      ## If response is 200, return the body.
      $ctx.result.body
  #else
      ## If response is not 200, append the response to error block.
      $utils.appendError($ctx.result.body, "$ctx.result.statusCode")
#end
EOF
}


resource "aws_appsync_function" "deleteFavorite" {
  api_id                   = aws_appsync_graphql_api.example.id
  data_source              = aws_appsync_datasource.favorites-dynamodb.name
  name                     = "deleteFavorite"
  request_mapping_template = <<EOF
{
      "operation" : "DeleteItem",
      "key" : {
          ## If your table's hash key is not named 'id', update it here. **
          "id" : { "S" : "$ctx.args.id" }
          ## If your table has a sort key, add it as an item here. **
      }
}
EOF

  response_mapping_template = <<EOF
## Raise a GraphQL field error in case of a datasource invocation error
  #if($ctx.error)
      $util.error($ctx.error.message, $ctx.error.type)
  #end
  ## Pass back the result from DynamoDB. **
$util.toJson($ctx.result)
EOF
}


resource "aws_appsync_function" "Mutation_addFavorite_Function" {
  api_id                   = aws_appsync_graphql_api.example.id
  data_source              = aws_appsync_datasource.favorites-dynamodb.name
  name                     = "addFavorite"
  request_mapping_template = <<EOF
## Below example shows how to create an object from all provided GraphQL arguments
  ## The primary key of the obejct is a randomly generated UUD using the $util.autoId() utility
  ## Other utilities include $util.matches() for regular expressions, $util.time.nowISO8601() or
  ##   $util.time.nowEpochMilliSeconds() for timestamps, and even List or Map helpers like
  ##   $util.list.copyAndRetainAll() $util.map.copyAndRemoveAllKeys() for shallow copies
  ## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-context-reference.html#utility-helpers-in-util

{
      "version" : "2018-05-29",
      "operation" : "PutItem",
      "key" : {
          ## If object "id" should come from GraphQL arguments, change to $util.dynamodb.toDynamoDBJson($ctx.args.id)
          "id": $util.dynamodb.toDynamoDBJson($util.autoId()),
      },
      "attributeValues" : $util.dynamodb.toMapValuesJson($ctx.args)
}
EOF

  response_mapping_template = <<EOF
## In order to retain the same execution behavior for 2017-02-28 templates
  ## you might have to uncomment the following code below.
  ## For more details about changes from 2017-02-28 to 2018-05-29 see
  ## https://docs-aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-changelog.html
  ##
  ## #if($ctx.error)
  ##   $util.error($ctx.error.message, $ctx.error.type)
  ## #end
  ## #if($util.isNull($ctx.result))
  ##   #return
  ## #end

  ## Pass back the result from DynamoDB. **
$util.toJson($ctx.result)
EOF
}

resource "aws_appsync_function" "addAddress" {
  api_id                   = aws_appsync_graphql_api.example.id
  data_source              = aws_appsync_datasource.address-dynamodb.name
  name                     = "addAddress"
  request_mapping_template = <<EOF
{
      "operation" : "PutItem",
      "key" : {
          ## If object "id" should come from GraphQL arguments, change to $util.dynamodb.toDynamoDBJson($ctx.args.id)
          "id": $util.dynamodb.toDynamoDBJson($util.autoId()),
      },
      "attributeValues" : $util.dynamodb.toMapValuesJson($ctx.args)
}
EOF

  response_mapping_template = <<EOF
## Raise a GraphQL field error in case of a datasource invocation error
  #if($ctx.error)
      $util.error($ctx.error.message, $ctx.error.type)
  #end
  ## Pass back the result from DynamoDB. **
$util.toJson($ctx.result)
EOF
}


resource "aws_appsync_function" "getAddressbyUserID" {
  api_id                   = aws_appsync_graphql_api.example.id
  data_source              = aws_appsync_datasource.address-dynamodb.name
  name                     = "getAddressbyUserID"
  request_mapping_template = <<EOF
{
      "operation" : "Query",
      "index": "userid-index",
      "query" : {
          ## Provide a query expression. **
          "expression": "userid = :userid",
          "expressionValues" : {
              ":userid" : $util.dynamodb.toDynamoDBJson($ctx.args.userid)
          }
      }
}
EOF

  response_mapping_template = <<EOF
## Raise a GraphQL field error in case of a datasource invocation error
  #if($ctx.error)
      $util.error($ctx.error.message, $ctx.error.type)
  #end
  ## Pass back the result from DynamoDB. **
$util.toJson($ctx.result)
EOF
}


resource "aws_appsync_function" "getFavoritesbyUser" {
  api_id                   = aws_appsync_graphql_api.example.id
  data_source              = aws_appsync_datasource.favorites-dynamodb.name
  name                     = "getFavoritesbyUser"
  request_mapping_template = <<EOF
{
      "operation" : "Query",
      "index": "userid-index",
      "query" : {
          ## Provide a query expression. **
          "expression": "userid = :userid",
          "expressionValues" : {
              ":userid" : $util.dynamodb.toDynamoDBJson($ctx.args.userid)
          }
      }
}
EOF

  response_mapping_template = <<EOF
## Raise a GraphQL field error in case of a datasource invocation error
  #if($ctx.error)
      $util.error($ctx.error.message, $ctx.error.type)
  #end
  ## Pass back the result from DynamoDB. **
$util.toJson($ctx.result)
EOF
}


resource "aws_appsync_function" "getUserbyEmail" {
  api_id                   = aws_appsync_graphql_api.example.id
  data_source              = aws_appsync_datasource.user-dynamodb.name
  name                     = "getUserbyEmail"
  request_mapping_template = <<EOF
{
      "operation" : "Query",
      "index" : "email-index",
      "query" : {
          ## Provide a query expression. **
          "expression": "email = :email",
          "expressionValues" : {
              ":email" : $util.dynamodb.toDynamoDBJson($ctx.args.email)
          }
      }
}
EOF

  response_mapping_template = <<EOF
## Raise a GraphQL field error in case of a datasource invocation error
  #if($ctx.error)
      $util.error($ctx.error.message, $ctx.error.type)
  #end
  ## Pass back the result from DynamoDB. **
$util.toJson($ctx.result)
EOF
}


resource "aws_appsync_function" "mutation_user" {
  api_id                   = aws_appsync_graphql_api.example.id
  data_source              = aws_appsync_datasource.user-dynamodb.name
  name                     = "mutation_user"
  request_mapping_template = <<EOF
{
      "operation" : "PutItem",
      "key" : {
          ## If object "id" should come from GraphQL arguments, change to $util.dynamodb.toDynamoDBJson($ctx.args.id)
          "id": $util.dynamodb.toDynamoDBJson($util.autoId()),
      },
      "attributeValues" : $util.dynamodb.toMapValuesJson($ctx.args)
}
EOF

  response_mapping_template = <<EOF
## Raise a GraphQL field error in case of a datasource invocation error
  #if($ctx.error)
      $util.error($ctx.error.message, $ctx.error.type)
  #end
  ## Pass back the result from DynamoDB. **
$util.toJson($ctx.result)
EOF
}






resource "aws_appsync_resolver" "Mutation_addAddress" {
  type              = "Mutation"
  api_id            = aws_appsync_graphql_api.example.id
  field             = "addAddress"
  request_template  = "{}"
  response_template = "$util.toJson($ctx.result)"
  kind              = "PIPELINE"
  pipeline_config {
    functions = [
      aws_appsync_function.addAddress.function_id,
    ]
  }
}

resource "aws_appsync_resolver" "Mutation_addUser" {
  type              = "Mutation"
  api_id            = aws_appsync_graphql_api.example.id
  field             = "addUser"
  request_template  = "{}"
  response_template = "$util.toJson($ctx.result)"
  kind              = "PIPELINE"
  pipeline_config {
    functions = [
      aws_appsync_function.mutation_user.function_id,
    ]
  }
}




resource "aws_appsync_resolver" "getAddressbyUserID" {
  type              = "Query"
  api_id            = aws_appsync_graphql_api.example.id
  field             = "getAddress"
  request_template  = "{}"
  response_template = "$util.toJson($ctx.result)"
  kind              = "PIPELINE"
  pipeline_config {
    functions = [
      aws_appsync_function.getAddressbyUserID.function_id,
    ]
  }
}

resource "aws_appsync_resolver" "getFavorite" {
  type              = "Query"
  api_id            = aws_appsync_graphql_api.example.id
  field             = "getFavorite"
  request_template  = "{}"
  response_template = "$util.toJson($ctx.result)"
  kind              = "PIPELINE"
  pipeline_config {
    functions = [
      aws_appsync_function.addAddress.function_id,
    ]
  }
}

resource "aws_appsync_resolver" "getUserbyEmail" {
  type              = "Query"
  api_id            = aws_appsync_graphql_api.example.id
  field             = "getUser"
  request_template  = "{}"
  response_template = "$util.toJson($ctx.result)"
  kind              = "PIPELINE"
  pipeline_config {
    functions = [
      aws_appsync_function.getUserbyEmail.function_id,
    ]
  }
}




resource "aws_appsync_resolver" "Mutation_addFavorite" {
  type              = "Mutation"
  api_id            = aws_appsync_graphql_api.example.id
  field             = "addFavorite"
  request_template  = "{}"
  response_template = "$util.toJson($ctx.result)"
  kind              = "PIPELINE"
  pipeline_config {
    functions = [
      aws_appsync_function.Mutation_addFavorite_Function.function_id,
    ]
  }
}


resource "aws_appsync_resolver" "Mutation_deleteFavorite" {
  type              = "Mutation"
  api_id            = aws_appsync_graphql_api.example.id
  field             = "deleteFavorite"
  request_template  = "{}"
  response_template = "$util.toJson($ctx.result)"
  kind              = "PIPELINE"
  pipeline_config {
    functions = [
      aws_appsync_function.deleteFavorite.function_id,
    ]
  }
}



resource "aws_appsync_resolver" "Query_pipelineTest" {
  type              = "Query"
  api_id            = aws_appsync_graphql_api.example.id
  field             = "getProductsbyTaxonomyID"
  request_template  = "{}"
  response_template = "$util.toJson($ctx.result)"
  kind              = "PIPELINE"
  pipeline_config {
    functions = [
      aws_appsync_function.test1.function_id,
    ]
  }
}

resource "aws_appsync_resolver" "Query_pipelineTest1" {
  type              = "Query"
  api_id            = aws_appsync_graphql_api.example.id
  field             = "getCategories"
  request_template  = "{}"
  response_template = "$util.toJson($ctx.result)"
  kind              = "PIPELINE"
  pipeline_config {
    functions = [
      aws_appsync_function.test2.function_id,
    ]
  }
}




// DynamoDB table Resolver for User Start here

resource "aws_dynamodb_table" "Users" {
  name           = "amnidhi-shop-users"
  read_capacity  = 1
  write_capacity = 1
  hash_key       = "id"

  attribute {
    name = "id"
    type = "S"
  }

  attribute {
    name = "email"
    type = "S"
  }

  global_secondary_index {
    name     = "email-index"
    hash_key = "email"
    //  range_key          = "TopScore"
    write_capacity  = 1
    read_capacity   = 1
    projection_type = "ALL"
    //  non_key_attributes = ["UserId"]
  }
}

resource "aws_iam_role" "Users" {
  name = "Users"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "appsync.amazonaws.com"
      },
      "Effect": "Allow"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy" "Users" {
  name = "Users"
  role = aws_iam_role.Users.id

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "dynamodb:*"
      ],
      "Effect": "Allow",
      "Resource": [
        "${aws_dynamodb_table.Users.arn}",
        "${aws_dynamodb_table.Users.arn}/index/email-index"
      ]
    }
  ]
}
EOF
}



resource "aws_appsync_datasource" "user-dynamodb" {
  api_id           = aws_appsync_graphql_api.example.id
  name             = "User"
  service_role_arn = aws_iam_role.Users.arn
  type             = "AMAZON_DYNAMODB"

  dynamodb_config {
    table_name = aws_dynamodb_table.Users.name
  }
}



// DynamoDB table Resolver for favorites Start here

resource "aws_dynamodb_table" "favorites" {
  name           = "favorites"
  read_capacity  = 1
  write_capacity = 1
  hash_key       = "id"

  attribute {
    name = "id"
    type = "S"
  }

  attribute {
    name = "userid"
    type = "S"
  }

  global_secondary_index {
    name     = "userid-index"
    hash_key = "userid"
    //  range_key          = "TopScore"
    write_capacity  = 1
    read_capacity   = 1
    projection_type = "ALL"
    //  non_key_attributes = ["UserId"]
  }
}

resource "aws_iam_role" "favorites" {
  name = "favorites"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "appsync.amazonaws.com"
      },
      "Effect": "Allow"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy" "favorites" {
  name = "favorites"
  role = aws_iam_role.favorites.id

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "dynamodb:*"
      ],
      "Effect": "Allow",
      "Resource": [
        "${aws_dynamodb_table.favorites.arn}",
        "${aws_dynamodb_table.address.arn}/index/userid-index"
      ]
    }
  ]
}
EOF
}



resource "aws_appsync_datasource" "favorites-dynamodb" {
  api_id           = aws_appsync_graphql_api.example.id
  name             = "favorites"
  service_role_arn = aws_iam_role.favorites.arn
  type             = "AMAZON_DYNAMODB"

  dynamodb_config {
    table_name = aws_dynamodb_table.favorites.name
  }
}

// DynamoDB table Resolver for address Start here

resource "aws_dynamodb_table" "address" {
  name           = "address"
  read_capacity  = 1
  write_capacity = 1
  hash_key       = "id"

  attribute {
    name = "id"
    type = "S"
  }

  attribute {
    name = "userid"
    type = "S"
  }

  global_secondary_index {
    name     = "userid-index"
    hash_key = "userid"
    //  range_key          = "TopScore"
    write_capacity  = 1
    read_capacity   = 1
    projection_type = "ALL"
    //  non_key_attributes = ["UserId"]
  }

}

resource "aws_iam_role" "address" {
  name = "address"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "appsync.amazonaws.com"
      },
      "Effect": "Allow"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy" "address" {
  name = "address"
  role = aws_iam_role.address.id

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "dynamodb:*"
      ],
      "Effect": "Allow",
      "Resource": [
        "${aws_dynamodb_table.address.arn}",
        "${aws_dynamodb_table.address.arn}/index/userid-index"
      ]
    }
  ]
}
EOF
}



resource "aws_appsync_datasource" "address-dynamodb" {
  api_id           = aws_appsync_graphql_api.example.id
  name             = "address"
  service_role_arn = aws_iam_role.address.arn
  type             = "AMAZON_DYNAMODB"

  dynamodb_config {
    table_name = aws_dynamodb_table.address.name
  }
}
