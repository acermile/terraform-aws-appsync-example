name: terraform-plan

on: 
  workflow_dispatch:

env:
  TF_VERSION: 0.15.0

jobs:
  terraform-plan:
    strategy:
      fail-fast: false
      matrix:
        workspace: [terraform-aws-appsync-example]

    name: ${{ matrix.workspace }}
    runs-on: ubuntu-latest
    environment: dev

    env:
      WORKSPACE: ${{ matrix.workspace }}

    steps:
      - name: Generate tfvars Path 
        id: tfvars
        run: |
          if [[ "${WORKSPACE}" == "st"* ]]; then
            echo "::set-output name=tfvars_file::tfvars/staging/${WORKSPACE}.tfvars"
          elif [[ "${WORKSPACE}" == "pd"* ]]; then
            echo "::set-output name=tfvars_file::tfvars/production/${WORKSPACE}.tfvars"
          else
            echo "::set-output name=tfvars_file::UNKNOWN"
          fi

      - name: Checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 0


      - name: "Configure AWS Credentials" 
        # You may pin to the exact commit or the version.
        # uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # AWS Access Key ID. This input is required if running in the GitHub hosted environment. It is optional if running in a self-hosted environment that already has AWS credentials, for example on an EC2 instance.
          aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          # AWS Secret Access Key. This input is required if running in the GitHub hosted environment. It is optional if running in a self-hosted environment that already has AWS credentials, for example on an EC2 instance.
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          # AWS Session Token
         # aws-session-token: # optional
          # AWS Region, e.g. us-east-2
          aws-region: us-east-1
          # Whether to set the AWS account ID for these credentials as a secret value, so that it is masked in logs. Valid values are 'true' and 'false'. Defaults to true
         # mask-aws-account-id: # optional
          # Use the provided credentials to assume an IAM role and configure the Actions environment with the assumed role credentials rather than with the provided credentials
          role-to-assume: arn:aws:sts::379053275836:role/RITM9948486-PowerUserAccess
          role-session-name: PowerUserAccess

      - name: Terraform Format
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.TF_VERSION }}
          tf_actions_subcommand: fmt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.TF_VERSION }}
          tf_actions_subcommand: init
          
        env:
          TF_WORKSPACE: ${{ env.WORKSPACE }}
          AWS_SHARED_CREDENTIALS_FILE: .aws/credentials
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Validate
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.TF_VERSION }}
          tf_actions_subcommand: validate
        env:
          TF_WORKSPACE: ${{ env.WORKSPACE }}
          AWS_SHARED_CREDENTIALS_FILE: .aws/credentials
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Plan
        id: terraform-plan
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.TF_VERSION }}
          tf_actions_subcommand: plan

        env:
          TF_WORKSPACE: ${{ env.WORKSPACE }}
          AWS_SHARED_CREDENTIALS_FILE: .aws/credentials
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



      - name: Cleanup AWS Credentials
        run: |
          rm -rf .aws
